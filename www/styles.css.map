{"version":3,"sources":["styles.styl","../node_modules/rupture/rupture/index.styl"],"names":[],"mappings":"AAQA,KACE,YAAyB,wBACzB,YAAa,IAEf,EACE,YAAa,IAEf,YACE,MAAO,KACP,YAAa,KACb,aAAc,KACd,UAAW,QAEb,eACE,OAAQ,OACR,UAAW,OAEb,EAAE,UACW,QACS,QACS,SAE7B,MAAO,QACP,gBAAiB,KACjB,YAAa,IAGf,GACE,UAAW,IACX,YAAa,IACb,MAAO,KACP,YAA8B,0BAC9B,SAAU,SACV,IAAK,OACL,QAAS,IAEX,KAAK,WACY,aACc,YACa,UAE1C,MAAO,gBAET,GACE,YAA6B,mDAC7B,YAAa,IACb,UAAW,MAEb,GACE,MAAO,QACP,YAAa,IACb,UAAW,MAEb,iBACE,QAAS,OACT,SAAU,SACV,MAAO,MACP,MAAO,KACP,IAAK,OACL,MAAO,KAGT,QACE,oBAAqB,OACrB,gBAAiB,MACjB,iBAAkB,QAClB,iBAAsD,wCACtD,MAAO,KACP,OAAQ,KACR,WAAY,MACZ,SAAU,SACV,OAAQ,EACR,QAAS,EACT,SAAU,QAEV,eACE,QAAS,GACT,MAAO,KACP,QAAS,MACT,SAAU,SACV,MAAO,KACP,OAAQ,KACR,OAAQ,EACR,WAAsC,8CACtC,QAAS,GAEX,iBA1FA,UAAU,OACV,OAAO,OACP,QAAQ,OA2FR,iBACE,gBAAiB,KACjB,MAAO,KACP,YAAa,IAEf,gBACE,IAAK,EACL,SAAU,SACV,MAAO,KACP,WAAY,OACZ,eAAgB,UAChB,YAAa,IACb,OAAQ,eACR,MAAO,IACP,QAAS,OACT,UAAU,OACV,UAAW,MACX,OAAQ,WC6BD,yCAAA,gBD3BL,UAAW,MACX,OAAQ,WC0BH,yCAAA,gBDxBL,UAAW,KACX,OAAQ,WAEd,oBACE,WAAY,KACZ,OAAQ,EACR,aAAc,EAEhB,oBACE,MAAO,KACP,SAAU,SACV,QAAS,YAEX,mBACE,QAAS,MACT,gBAAiB,KACjB,eAAgB,UAChB,MAAO,KAGT,kBACE,OAAQ,KAEV,YACE,iBAAkB,QAClB,QAAS,YAEX,UACE,iBAAkB,QAClB,QAAS,YACT,MAAO,KAET,aACE,iBAAkB,QAClB,QAAS,gBACT,WAAY,OAEd,aACE,iBAAkB,QAClB,QAAS,gBACT,MAAO,KACP,WAAY,OAEd,eACE,UAAW,MACX,YAAa,IAEf,SACE,iBAAkB,QAClB,QAAS,qBAEX,SACE,iBAAkB,QAClB,QAAS,qBAEX,YACE,iBAAkB,QAClB,QAAS,YACT,MAAO,KAET,mBACE,iBAAkB,QAClB,iBAAyD,2CACzD,gBAAiB,MACjB,QAAS,YAEX,YACE,iBAAkB,QAClB,QAAS,cACT,MAAO,KAET,iBACE,MAAO,KACP,YAAa,IACb,eAAgB,UAElB,QACE,gBAAiB,MAEnB,cACE,OAAQ,cACR,WAAY,OACZ,UAAW,MACX,YAAa,IAGf,SAAS,iBACkB,eAEzB,MAAO,KACP,UAAW,KACX,YAAa,IAEf,eACE,MAAO","file":"styles.css","sourcesContent":["@import \"rupture\"\n\n/* General */\ncontent-container()\n  max-width 1200px\n  margin 0 auto\n  padding 0 15px\n\nbody\n  font-family: \"museo-sans\", sans-serif\n  font-weight: 300\n\np\n  font-weight: 300\n\n.full-width\n  width: 100%\n  margin-left: auto\n  margin-right: auto\n  max-width: initial\n\n.row-container\n  margin: 0 auto\n  max-width: 1000px\n\na,\na:visited,\na:hover,\na:focus,\na:active\n  color: #27272b\n  text-decoration: none\n  font-weight: 700\n\n/* HEADLINES */\nh2\n  font-size: 2.0em\n  font-weight: 300\n  color: #fff\n  text-shadow: rgba(0, 0, 0, 0.3) 0px 1px 2px\n  position: absolute\n  top: -1.5em\n  z-index: 100\n\nh2 a,\nh2 a:hover,\nh2 a:visited,\nh2 a:active,\nh2 a:link\n  color: #fff !important\n\nh3\n  font-family: \"Helvetica Neue\", Helvetica, Roboto, Arial, sans-serif\n  font-weight: 300\n  font-size: 2.5em\n\nh4\n  color: dimgrey\n  font-weight: 200\n  font-size: 1.5em\n\n#site-navigation\n  display: inline\n  position: relative\n  float: right\n  clear: both\n  top: -2.7em\n  color: #fff\n\n/* Header */\n.header\n  background-position: center\n  background-size: cover\n  background-color: #dfb95d\n  background-image: url(../img/header-tofino@desktop.jpg)\n  width: 100%\n  height: 75vh\n  min-height: 550px\n  position: relative\n  margin: 0\n  padding: 0\n  overflow: hidden\n    \n  &:before\n    content: \"\"\n    color: #ff0000\n    display: block\n    position: absolute\n    width: 100%\n    height: 100%\n    bottom: 0px\n    background: url(../img/header-fade.png) repeat-x bottom\n    opacity: 0.6\n\n  &__content\n    content-container()\n\n  &__title a\n    text-decoration: none\n    color: #fff\n    font-weight: 100\n\n  &__slogan\n    top: 0\n    position: relative\n    color: #fff\n    text-align: center\n    text-transform: uppercase\n    font-weight: 500\n    border: 7px solid #fff\n    width: 95%\n    padding: 0 15px\n    max-width 1000px\n    font-size: 2.5em\n    margin: 25vh auto\n    +above(40rem)\n      font-size: 3.7em\n      margin: 20vh auto\n    +above(64rem)\n      font-size: 4rem\n      margin: 25vh auto\n\n.main-navigation ul\n  list-style: none\n  margin: 0\n  padding-left: 0\n\n.main-navigation li\n  float: left\n  position: relative\n  padding: 0 0 0 1.3em\n\n.main-navigation a\n  display: block\n  text-decoration: none\n  text-transform: uppercase\n  color: #fff\n\n/* Body */\nbody.home div#top\n  height: 10em\n\n.row-bright\n  background-color: #f1f7f7\n  padding: 4em 0 3em 0\n\n.row-dark\n  background-color: #160c00\n  padding: 2em 0 1em 0\n  color: #fff\n\n.row-caption\n  background-color: #f1f7f7\n  padding: 4.7em 0 3.5em 0\n  text-align: center\n\n.row-inverse\n  background-color: #1c1c1c\n  padding: 4.7em 0 3.5em 0\n  color: #fff\n  text-align: center\n\n.row-inverse p\n  font-size: 1.5em\n  font-weight: 200\n\n.row-tum\n  background-color: #ebebeb\n  padding: 2em 0 0 0 !important\n\n.row-lmu\n  background-color: #ebebeb\n  padding: 2em 0 0 0 !important\n\n.row-lmu-bg\n  background-color: #1b7e41\n  padding: 2em 0 1em 0\n  color: #fff\n\n.row-lmu-navigator\n  background-color: #f1f7f7\n  background-image: url(../img/projects-lmunavigator-bg.png)\n  background-size: cover\n  padding: 4em 0 4em 0\n\n.row-footer\n  background-color: #212121\n  padding: 2.5em 0 4em 0\n  color: #fff\n\n.row-footer span\n  width: 100%\n  line-height: 3em\n  text-transform: uppercase\n\n.row-bg\n  background-size: cover\n\n.row-teaser p\n  margin: 0.5em 0 0.8em 0\n  text-align: center\n  font-size: 2.3em\n  font-weight: 100\n\n/* FOOTER */\nfooter a,\nfooter a:visited,\nfooter a:hover\n  color: #fff\n  font-size: 0.9em\n  line-height: 2em\n\nfooter a:hover\n  color: #a8a8a8","base-font-size ?= 16px\nrasterise-media-queries ?= false\n\nrupture = {\n  rasterise-media-queries: rasterise-media-queries\n  mobile-cutoff: 400px\n  desktop-cutoff: 1050px\n  hd-cutoff: 1800px\n  enable-em-breakpoints: false\n  base-font-size: base-font-size\n  anti-overlap: false\n  density-queries: 'dppx' 'webkit' 'moz' 'dpi'\n  retina-density: 1.5\n  use-device-width: false\n}\nrupture.scale = 0 (rupture.mobile-cutoff) 600px 800px (rupture.desktop-cutoff) (rupture.hd-cutoff)\nrupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'\n\n-is-string(val)\n  if typeof(val) is not 'unit'\n    if val is a 'string' or val is a 'ident'\n      true\n    else\n      false\n  else\n    false\n\n-get-scale-number(scale-name)\n  for list-item, i in rupture.scale-names\n    if list-item is scale-name\n      return i + 1\n  return false\n\n-convert-to(to-unit, value, context = rupture.base-font-size)\n  from-unit = unit(value)\n  return value if to-unit is from-unit\n  if to-unit in ('em' 'rem')\n    return value if from-unit in ('em' 'rem')\n    return unit((value / context), to-unit)\n  if to-unit is 'px'\n    return unit((value * context), 'px')\n\n-on-scale(n)\n  return unit(n) is ''\n\n-larger-than-scale(n)\n  return (n > (length(rupture.scale) - 1)) and -on-scale(n)\n\n-is-zero(n)\n  return n is 0\n\n-overlap-shift(anti-overlap, n)\n  shift-unit = unit(n)\n  anti-overlap = 0px unless anti-overlap\n  anti-overlap = 1px if anti-overlap is true\n  if length(anti-overlap) is 1\n    return -convert-to(shift-unit, anti-overlap)\n  for val in anti-overlap\n    return val if unit(val) is shift-unit\n\n-adjust-overlap(anti-overlap, n, side = 'min')\n  -shift = -overlap-shift(anti-overlap, n)\n  if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)\n    n = n + -shift\n  return n\n\n-is-positive(n)\n  return n >= 0\n\n-density-queries(density)\n  if typeof(density) is not 'unit'\n    if not -is-string(density)\n      density = '%s' % density\n  density = rupture.retina-density if density is 'retina'\n  queries = ()\n  for query in rupture.density-queries\n    if query is 'webkit'\n      push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))\n    else if query is 'moz'\n      push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))\n    else if query is 'o'\n      push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))\n    else if query is 'ratio'\n      push(queries, '(min-device-pixel-ratio: %s)' % (density))\n    else if query is 'dpi'\n      if -is-string(density)\n        density=convert(density)\n      push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))\n    else if query is 'dppx'\n      push(queries, '(min-resolution: %sdppx)' % (density))\n  return queries\n\ncreate-fallback-class(selected, class)\n  /{'' + class + ' ' + selected}\n    {block}\n\n// +between(min, max)\n// usage (scale can be mixed with custom values):\n//   - +between(1, 3) scale:scale\n//   - +between(0, 3) 0 width:scale\n//   - +between(200px, 500px) custom:custom\n//   - +between(0, 300px) 0 width:custom\n//   - +between(1, 300px) scale:custom\n//   - +between(200px, 4) custom:scale\n\nbetween(min, max, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  selected = selector()\n\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  if -is-string(min)\n    min = -get-scale-number(min)\n  if -is-string(max)\n    max = -get-scale-number(max)\n\n  -min = rupture.scale[min - 1] unless -is-zero(min) or (not -on-scale(min))\n  -max = rupture.scale[max] unless not -on-scale(max)\n  -min ?= min\n  -max ?= max\n\n  if (rupture.rasterise-media-queries)\n    if not (density or -max or orientation)\n      {block}\n  else\n    condition = 'only screen'\n    use-device-width = use-device-width ? 'device-' : ''\n    unless -min is 0\n      -min = -convert-to('em', -min) if rupture.enable-em-breakpoints\n      -min = -adjust-overlap(anti-overlap, -min, side: 'min')\n      condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)\n    unless -larger-than-scale(max)\n      -max = -convert-to('em', -max) if rupture.enable-em-breakpoints\n      -max = -adjust-overlap(anti-overlap, -max, side: 'max')\n      condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)\n    if orientation\n      condition = condition + ' and (orientation: %s)' % (orientation)\n    if density\n      conditions = ()\n      for query in -density-queries(density)\n        push(conditions, condition + ' and %s' % (query))\n      condition = join(', ', conditions)\n    @media condition\n      {block}\n  if fallback-class\n    +create-fallback-class(selected, fallback-class)\n      {block}\n\nat(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nfrom-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, length(rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nabove = from-width\n\nto-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nbelow = to-width\n\nmobile(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +below(rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ntablet(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(rupture.mobile-cutoff, rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndesktop(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nhd(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndensity(density, orientation = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    conditions = ()\n    for query in -density-queries(density)\n      condition = 'only screen and %s' % (query)\n      if orientation\n        condition = condition + ' and (orientation: %s)' % (orientation)\n      push(conditions, condition)\n    condition = join(', ', conditions)\n    @media condition\n      {block}\n    if fallback-class\n      +create-fallback-class(selected, fallback-class)\n        {block}\n\npixel-ratio = density\n\nretina(orientation = null, fallback-class = null)\n  +density('retina', orientation, fallback-class)\n    {block}\n\nlandscape(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: landscape, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: landscape)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n\nportrait(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: portrait, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: portrait)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n"]}
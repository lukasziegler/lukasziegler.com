{"version":3,"sources":["styles.styl","../../node_modules/rupture/rupture/index.styl","header.styl","panel.styl","panel-list.styl","footer.styl"],"names":[],"mappings":"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","file":"styles.css","sourcesContent":["@require \"rupture\"\nrupture.scale = 0 640px 1024px\nrupture.scale-names = 'mobile' 'tablet' 'desktop'\n\n// general mixins\ncontent-container(padding = 15px)\n  max-width 1200px\n  margin 0 auto\n  padding 0 padding\n\n// base variables\npaleBlue = #f1f7f7\nsharkGrey = #27272b\nmaxWidthContent = 1000px\n\nheadlineFont = Montserrat, \"Helvetica Neue\", Helvetica, Roboto, Arial, sans-serif\nbodyFont = \"Open Sans\", \"museo-sans\", sans-serif\n\n// base styles\nbody\n  font-family bodyFont\n  font-weight 300\n  overflow-y scroll\n  -webkit-overflow-scrolling touch\n\np\n  font-weight 300\n\na.link\n  &\n  &:visited\n  &:hover\n  &:focus\n  &:active\n    color sharkGrey\n    font-weight 400\n    text-decoration none\n    border-bottom 2px solid rgba(0,15,30,.2)\n    transition .2s cubic-bezier(0.4, 0, 0.2, 0.99);\n  &:hover\n    border-bottom 2px solid rgba(0,15,30, 1)\n\n// Legacy code\n.full-width\n  width: 100%\n  margin-left: auto\n  margin-right: auto\n  max-width: initial\n\n.row-container\n  margin: 0 auto\n  max-width: 1000px\n  height: 100px\n\nh1, h2, h3\n  font-family headlineFont\n\nh3\n  font-weight: 300\n  font-size: 2.5em\n\nh4\n  color: dimgrey\n  font-weight: 200\n  font-size: 1.5em\n\n.row-bright\n  background-color: #f1f7f7\n  padding 25px 20px\n  +above('tablet')\n    padding 4em 0 3em 0\n\n.row-dark\n  background-color: #160c00\n  padding: 2em 0 1em 0\n  color: #fff\n\n.row-caption\n  background-color: #f1f7f7\n  padding: 4.7em 0 3.5em 0\n  text-align: center\n\n.row-inverse\n  background-color: #1c1c1c\n  padding: 4.7em 0 3.5em 0\n  color: #fff\n  text-align: center\n\n.row-inverse p\n  font-size: 1.5em\n  font-weight: 200\n\n.row-bg\n  background-size: cover\n\n.row-teaser\n  padding 0 20px\n\n.row-teaser p\n  margin: 0.5em 0 0.8em 0\n  text-align: center\n  font-size: 2.3em\n  font-weight: 100\n\n// Module imports\n@require \"header\"\n@require \"panel\"\n@require \"panel-list\"\n@require \"footer\"\n","base-font-size ?= 16px\nrasterise-media-queries ?= false\n\nrupture = {\n  rasterise-media-queries: rasterise-media-queries\n  mobile-cutoff: 400px\n  desktop-cutoff: 1050px\n  hd-cutoff: 1800px\n  enable-em-breakpoints: false\n  base-font-size: base-font-size\n  anti-overlap: false\n  density-queries: 'dppx' 'webkit' 'moz' 'dpi'\n  retina-density: 1.5\n  use-device-width: false\n}\nrupture.scale = 0 (rupture.mobile-cutoff) 600px 800px (rupture.desktop-cutoff) (rupture.hd-cutoff)\nrupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'\n\n-is-string(val)\n  if typeof(val) is not 'unit'\n    if val is a 'string' or val is a 'ident'\n      true\n    else\n      false\n  else\n    false\n\n-get-scale-number(scale-name)\n  for list-item, i in rupture.scale-names\n    if list-item is scale-name\n      return i + 1\n  return false\n\n-convert-to(to-unit, value, context = rupture.base-font-size)\n  from-unit = unit(value)\n  return value if to-unit is from-unit\n  if to-unit in ('em' 'rem')\n    return value if from-unit in ('em' 'rem')\n    return unit((value / context), to-unit)\n  if to-unit is 'px'\n    return unit((value * context), 'px')\n\n-on-scale(n)\n  return unit(n) is ''\n\n-larger-than-scale(n)\n  return (n > (length(rupture.scale) - 1)) and -on-scale(n)\n\n-is-zero(n)\n  return n is 0\n\n-overlap-shift(anti-overlap, n)\n  shift-unit = unit(n)\n  anti-overlap = 0px unless anti-overlap\n  anti-overlap = 1px if anti-overlap is true\n  if length(anti-overlap) is 1\n    return -convert-to(shift-unit, anti-overlap)\n  for val in anti-overlap\n    return val if unit(val) is shift-unit\n\n-adjust-overlap(anti-overlap, n, side = 'min')\n  -shift = -overlap-shift(anti-overlap, n)\n  if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)\n    n = n + -shift\n  return n\n\n-is-positive(n)\n  return n >= 0\n\n-density-queries(density)\n  if typeof(density) is not 'unit'\n    if not -is-string(density)\n      density = '%s' % density\n  density = rupture.retina-density if density is 'retina'\n  queries = ()\n  for query in rupture.density-queries\n    if query is 'webkit'\n      push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))\n    else if query is 'moz'\n      push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))\n    else if query is 'o'\n      push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))\n    else if query is 'ratio'\n      push(queries, '(min-device-pixel-ratio: %s)' % (density))\n    else if query is 'dpi'\n      if -is-string(density)\n        density=convert(density)\n      push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))\n    else if query is 'dppx'\n      push(queries, '(min-resolution: %sdppx)' % (density))\n  return queries\n\ncreate-fallback-class(selected, class)\n  /{'' + class + ' ' + selected}\n    {block}\n\n// +between(min, max)\n// usage (scale can be mixed with custom values):\n//   - +between(1, 3) scale:scale\n//   - +between(0, 3) 0 width:scale\n//   - +between(200px, 500px) custom:custom\n//   - +between(0, 300px) 0 width:custom\n//   - +between(1, 300px) scale:custom\n//   - +between(200px, 4) custom:scale\n\nbetween(min, max, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  selected = selector()\n\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  if -is-string(min)\n    min = -get-scale-number(min)\n  if -is-string(max)\n    max = -get-scale-number(max)\n\n  -min = rupture.scale[min - 1] unless -is-zero(min) or (not -on-scale(min))\n  -max = rupture.scale[max] unless not -on-scale(max)\n  -min ?= min\n  -max ?= max\n\n  if (rupture.rasterise-media-queries)\n    if not (density or -max or orientation)\n      {block}\n  else\n    condition = 'only screen'\n    use-device-width = use-device-width ? 'device-' : ''\n    unless -min is 0\n      -min = -convert-to('em', -min) if rupture.enable-em-breakpoints\n      -min = -adjust-overlap(anti-overlap, -min, side: 'min')\n      condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)\n    unless -larger-than-scale(max)\n      -max = -convert-to('em', -max) if rupture.enable-em-breakpoints\n      -max = -adjust-overlap(anti-overlap, -max, side: 'max')\n      condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)\n    if orientation\n      condition = condition + ' and (orientation: %s)' % (orientation)\n    if density\n      conditions = ()\n      for query in -density-queries(density)\n        push(conditions, condition + ' and %s' % (query))\n      condition = join(', ', conditions)\n    @media condition\n      {block}\n  if fallback-class\n    +create-fallback-class(selected, fallback-class)\n      {block}\n\nat(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nfrom-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, length(rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nabove = from-width\n\nto-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nbelow = to-width\n\nmobile(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +below(rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ntablet(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(rupture.mobile-cutoff, rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndesktop(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nhd(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndensity(density, orientation = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    conditions = ()\n    for query in -density-queries(density)\n      condition = 'only screen and %s' % (query)\n      if orientation\n        condition = condition + ' and (orientation: %s)' % (orientation)\n      push(conditions, condition)\n    condition = join(', ', conditions)\n    @media condition\n      {block}\n    if fallback-class\n      +create-fallback-class(selected, fallback-class)\n        {block}\n\npixel-ratio = density\n\nretina(orientation = null, fallback-class = null)\n  +density('retina', orientation, fallback-class)\n    {block}\n\nlandscape(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: landscape, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: landscape)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n\nportrait(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: portrait, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: portrait)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n",".header\n  background-position: center\n  background-size: cover\n  background-color: #dfb95d\n  background-image: url(../img/header-tofino@desktop.jpg)\n  width: 100%\n  height: 75vh\n  min-height: 550px\n  position: relative\n  margin: 0\n  padding: 0\n  overflow: hidden\n  \n  &--handpan\n    background-image: url(../img/lukas-handpan-orangerie@desktop.jpg)\n    &:before\n      content: \"\"\n      color: #ff0000\n      display: block\n      position: absolute\n      width: 100%\n      height: 100px\n      top: 0px\n      background: url(../img/header-fade-top.png) repeat-x bottom\n      opacity: 0.6\n    \n  &:after\n    content: \"\"\n    color: #ff0000\n    display: block\n    position: absolute\n    width: 100%\n    height: 100px\n    bottom: 0px\n    background: url(../img/header-fade.png) repeat-x bottom\n    opacity: 0.6\n\n  &__content\n    position relative\n    display flex\n    align-items center\n    height 100%\n    max-height 110vh\n    content-container()\n\n  &__title\n    position absolute\n    top 10px\n    left 15px\n    +above('tablet')\n      left 25px\n\n  &__title a\n    text-decoration: none\n    color: #fff\n    font-weight: 100\n\n  &__slogan\n    width 95%\n    margin 25vh auto\n    padding 0 15px\n    max-width maxWidthContent\n    text-align center\n    border 7px solid #fff\n    font-size 40px\n    font-weight 700\n    text-transform uppercase\n    text-shadow rgba(0, 0, 0, 0.3) 0px 1px 2px\n    color white\n    +above('tablet')\n      font-size: 55px\n      margin: 20vh auto\n    +above('desktop')\n      font-size: 64px\n      margin: 25vh auto\n\n    &-link\n      &:hover,\n      &:visited,\n      &:active,\n      &:link\n        color: #fff\n      &:hover\n        text-decoration none\n",".panel\n  padding 40px 30px\n  +above('tablet')\n    padding 32px 40px\n  +above('desktop')\n    padding 60px 40px\n  background-color paleBlue\n\n  &__container\n    max-width maxWidthContent\n    margin 0 auto\n    display block\n    +above('desktop')\n      display flex\n\n  &__headline\n    max-width maxWidthContent\n    margin 0 auto\n    font-size 32px\n    line-height 1.4\n    padding-bottom 16px\n    +above('tablet')\n      padding-bottom 16px\n      font-size 40px\n\n  &__content-block\n    width 100%\n\n  &__paragraph\n    font-size 16px\n    line-height 1.6\n    +above('tablet')\n      font-size 18px\n\n  &__image-block\n    flex-shrink 0\n    flex-grow 1\n    max-width 300px\n    margin 0 auto\n    +above('desktop')\n      margin 0\n      max-width 350px\n      &--right\n        margin-left 35px\n      &--left\n        order -1\n        margin-right 35px\n\n  &__image-view\n    padding 8px 0\n",".panel-list\n  list-style none\n  font-size 20px\n  font-weight 200\n  text-align center\n\n  &--left-aligned_desktop\n    +at('desktop')\n      text-align left\n",".footer\n  background-color #212121\n  color #fff\n  padding 60px 0\n  +above('tablet')\n    padding 60px 0 80px 0\n\n  &__wrapper\n    content-container(30px)\n    max-width 1000px\n    display flex\n    justify-content space-around\n    flex-wrap wrap\n    +above('tablet')\n      justify-content space-between\n\n  &__cta\n    padding 5px 10px\n    border 1px solid white\n    background-color white\n    color #212121\n    text-transform uppercase\n    cursor default\n    font-weight 700\n    font-size 1.1rem\n\n  &__section\n    min-width 175px\n    padding-bottom 25px\n\n    &-title\n      display block\n      text-transform uppercase\n      padding-bottom 1px\n      margin-bottom 12px\n      margin-right 5px\n      border-bottom 3px solid rgba(white,0.2)\n      font-weight 700\n      font-size 1.1rem\n      color rgba(white, 0.7)\n\n\n    &-link\n      display block\n      text-decoration none\n      font-size 0.9rem\n      font-weight 300\n      line-height 2rem\n      transition .1s cubic-bezier(0.4, 0, 0.2, 0.99);\n      &, &:visited\n        color #b9b9b9\n        color rgba(white, 0.9)\n      &:hover, &:focus\n        color #fff\n"]}